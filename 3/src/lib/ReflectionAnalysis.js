// Verbesserte Reflexionsanalyse mit robusterer Fehlerbehandlung
import localStorageUtil from './localStorageUtil';

// Reflexionstypen
export const reflectionTypes = [
  {
    id: "daily",
    name: "T√§gliche Reflexion",
    description: "Eine kurze t√§gliche Reflexion √ºber deinen Tag, deine Stimmung und deine Fortschritte.",
    prompts: [
      "Wie f√ºhlst du dich heute?",
      "Was ist heute gut gelaufen?",
      "Was h√§ttest du heute besser machen k√∂nnen?",
      "Worauf freust du dich morgen?"
    ],
    minLength: 20,
    recommendedLength: 100,
    xpReward: 50
  },
  {
    id: "weekly",
    name: "W√∂chentliche Reflexion",
    description: "Eine tiefere Reflexion √ºber deine Woche, deine Fortschritte und deine Ziele.",
    prompts: [
      "Was waren deine gr√∂√üten Erfolge diese Woche?",
      "Welche Herausforderungen hast du diese Woche erlebt?",
      "Wie hast du dich deinen Zielen angen√§hert?",
      "Was m√∂chtest du n√§chste Woche anders machen?"
    ],
    minLength: 50,
    recommendedLength: 200,
    xpReward: 100
  },
  {
    id: "monthly",
    name: "Monatliche Reflexion",
    description: "Eine umfassende Reflexion √ºber deinen Monat, deine Fortschritte und deine langfristigen Ziele.",
    prompts: [
      "Wie zufrieden bist du mit deinem Fortschritt in diesem Monat?",
      "Welche neuen Erkenntnisse hast du gewonnen?",
      "Wie haben sich deine Priorit√§ten ver√§ndert?",
      "Welche Ziele m√∂chtest du im n√§chsten Monat verfolgen?"
    ],
    minLength: 100,
    recommendedLength: 300,
    xpReward: 200
  },
  {
    id: "goal",
    name: "Ziel-Reflexion",
    description: "Eine fokussierte Reflexion √ºber ein bestimmtes Ziel und deinen Fortschritt dazu.",
    prompts: [
      "Welches Ziel m√∂chtest du reflektieren?",
      "Wie zufrieden bist du mit deinem Fortschritt?",
      "Was hat dir geholfen, diesem Ziel n√§her zu kommen?",
      "Was hat dich zur√ºckgehalten?",
      "Wie kannst du deine Strategie anpassen?"
    ],
    minLength: 50,
    recommendedLength: 200,
    xpReward: 100
  },
  {
    id: "challenge",
    name: "Herausforderungs-Reflexion",
    description: "Eine Reflexion √ºber eine spezifische Herausforderung oder ein Problem, dem du gegen√ºberstehst.",
    prompts: [
      "Welche Herausforderung m√∂chtest du reflektieren?",
      "Wie hat diese Herausforderung dich beeinflusst?",
      "Welche Strategien hast du ausprobiert?",
      "Was hast du aus dieser Situation gelernt?",
      "Wie wirst du √§hnliche Situationen in Zukunft angehen?"
    ],
    minLength: 50,
    recommendedLength: 200,
    xpReward: 100
  },
  {
    id: "gratitude",
    name: "Dankbarkeits-Reflexion",
    description: "Eine Reflexion √ºber Dinge, f√ºr die du dankbar bist, um Positivit√§t und Wertsch√§tzung zu f√∂rdern.",
    prompts: [
      "Wof√ºr bist du heute dankbar?",
      "Welche Menschen haben einen positiven Einfluss auf dein Leben?",
      "Welche kleinen Freuden hast du heute erlebt?",
      "Wie kannst du mehr Dankbarkeit in deinen Alltag integrieren?"
    ],
    minLength: 30,
    recommendedLength: 150,
    xpReward: 75
  }
];

// Stimmungskategorien
export const moodCategories = [
  {
    id: "great",
    name: "Gro√üartig",
    emoji: "üòÑ",
    color: "#4CAF50",
    description: "Ich f√ºhle mich energiegeladen, motiviert und sehr positiv."
  },
  {
    id: "good",
    name: "Gut",
    emoji: "üôÇ",
    color: "#8BC34A",
    description: "Ich f√ºhle mich allgemein positiv und zufrieden."
  },
  {
    id: "neutral",
    name: "Neutral",
    emoji: "üòê",
    color: "#FFC107",
    description: "Ich f√ºhle mich weder besonders gut noch schlecht."
  },
  {
    id: "tired",
    name: "M√ºde",
    emoji: "üò¥",
    color: "#FF9800",
    description: "Ich f√ºhle mich ersch√∂pft oder energielos."
  },
  {
    id: "stressed",
    name: "Gestresst",
    emoji: "üòì",
    color: "#FF5722",
    description: "Ich f√ºhle mich angespannt, √ºberfordert oder unter Druck."
  },
  {
    id: "sad",
    name: "Traurig",
    emoji: "üòî",
    color: "#2196F3",
    description: "Ich f√ºhle mich niedergeschlagen oder entmutigt."
  },
  {
    id: "anxious",
    name: "√Ñngstlich",
    emoji: "üòü",
    color: "#9C27B0",
    description: "Ich f√ºhle mich besorgt, nerv√∂s oder √§ngstlich."
  },
  {
    id: "angry",
    name: "W√ºtend",
    emoji: "üò†",
    color: "#F44336",
    description: "Ich f√ºhle mich frustriert, gereizt oder w√ºtend."
  }
];

// Validiere Reflexionseingabe
export const validateReflectionInput = (content, type) => {
  if (!content || typeof content !== 'string') {
    return {
      valid: false,
      message: "Bitte gib einen Text f√ºr deine Reflexion ein.",
      suggestion: "Versuche, deine Gedanken in Worte zu fassen, auch wenn es nur ein paar S√§tze sind."
    };
  }
  
  const reflectionType = reflectionTypes.find(t => t.id === type) || reflectionTypes[0];
  const minLength = reflectionType.minLength;
  
  if (content.length < minLength) {
    return {
      valid: false,
      message: `Deine Reflexion ist zu kurz. Mindestens ${minLength} Zeichen werden empfohlen.`,
      suggestion: `Versuche, mehr Details zu deinen Gedanken und Gef√ºhlen hinzuzuf√ºgen. Die empfohlene L√§nge f√ºr eine ${reflectionType.name} ist etwa ${reflectionType.recommendedLength} Zeichen.`
    };
  }
  
  // Pr√ºfe auf unangemessene Inhalte (einfache Implementierung)
  const inappropriatePatterns = [
    /\b(fuck|shit|ass|bitch|dick|pussy|cunt)\b/i,
    /\b(nazi|hitler|kkk|terrorist)\b/i,
    /\b(kill|murder|suicide|die|death)\b/i
  ];
  
  for (const pattern of inappropriatePatterns) {
    if (pattern.test(content)) {
      return {
        valid: false,
        message: "Deine Reflexion enth√§lt m√∂glicherweise unangemessene Inhalte.",
        suggestion: "Bitte √ºberarbeite deine Reflexion und vermeide potenziell verletzende oder unangemessene Sprache."
      };
    }
  }
  
  // Pr√ºfe auf unverst√§ndliche Eingaben (sehr einfache Implementierung)
  const wordCount = content.split(/\s+/).length;
  const avgWordLength = content.length / wordCount;
  const hasRepeatedChars = /(.)\1{5,}/.test(content); // z.B. "aaaaaa"
  
  if (wordCount < 3 || avgWordLength > 20 || hasRepeatedChars) {
    return {
      valid: false,
      message: "Deine Reflexion scheint unverst√§ndlich zu sein.",
      suggestion: "Versuche, vollst√§ndige S√§tze zu verwenden und deine Gedanken klar auszudr√ºcken."
    };
  }
  
  return {
    valid: true,
    message: "Deine Reflexion wurde erfolgreich validiert.",
    suggestion: ""
  };
};

// Analysiere Reflexion und generiere Einsichten
export const analyzeReflection = (content, mood, type) => {
  // Validiere Eingabe
  const validation = validateReflectionInput(content, type);
  if (!validation.valid) {
    return {
      success: false,
      message: validation.message,
      suggestion: validation.suggestion,
      insights: []
    };
  }
  
  // Extrahiere Schl√ºsselw√∂rter und Themen
  const keywords = extractKeywords(content);
  const themes = identifyThemes(keywords, content);
  
  // Generiere Einsichten basierend auf Inhalt, Stimmung und Themen
  const insights = generateInsights(content, mood, themes, type);
  
  // Generiere Empfehlungen
  const recommendations = generateRecommendations(themes, mood, type);
  
  return {
    success: true,
    message: "Reflexion erfolgreich analysiert.",
    keywords,
    themes,
    insights,
    recommendations,
    moodAnalysis: analyzeMood(content, mood)
  };
};

// Extrahiere Schl√ºsselw√∂rter aus dem Text
const extractKeywords = (content) => {
  // Einfache Implementierung: Entferne Stoppw√∂rter und z√§hle H√§ufigkeit
  const stopWords = [
    "der", "die", "das", "ein", "eine", "und", "oder", "aber", "wenn", "dann",
    "ich", "du", "er", "sie", "es", "wir", "ihr", "sie", "mich", "dich",
    "zu", "in", "an", "auf", "mit", "f√ºr", "von", "bei", "nach", "aus",
    "ist", "sind", "war", "waren", "bin", "bist", "hat", "haben", "hatte", "hatten",
    "wird", "werden", "wurde", "wurden", "kann", "k√∂nnen", "k√∂nnte", "k√∂nnten",
    "dass", "weil", "obwohl", "w√§hrend", "durch", "√ºber", "unter", "zwischen",
    "the", "a", "an", "and", "or", "but", "if", "then", "i", "you", "he", "she",
    "it", "we", "they", "me", "him", "her", "us", "them", "to", "in", "on",
    "with", "for", "from", "by", "at", "as", "of", "is", "are", "was", "were",
    "am", "be", "been", "has", "have", "had", "will", "would", "can", "could",
    "that", "because", "although", "while", "through", "about", "under", "between"
  ];
  
  // Tokenisiere Text
  const words = content.toLowerCase()
    .replace(/[.,\/#!$%\^&\*;:{}=\-_`~()]/g, "")
    .split(/\s+/);
  
  // Entferne Stoppw√∂rter und z√§hle H√§ufigkeit
  const wordCounts = {};
  words.forEach(word => {
    if (word.length > 2 && !stopWords.includes(word)) {
      wordCounts[word] = (wordCounts[word] || 0) + 1;
    }
  });
  
  // Sortiere nach H√§ufigkeit
  return Object.entries(wordCounts)
    .sort((a, b) => b[1] - a[1])
    .slice(0, 10)
    .map(entry => entry[0]);
};

// Identifiziere Themen basierend auf Schl√ºsselw√∂rtern und Inhalt
const identifyThemes = (keywords, content) => {
  const themePatterns = [
    {
      theme: "Produktivit√§t",
      patterns: [
        /arbeit/i, /produktiv/i, /effizien/i, /aufgabe/i, /projekt/i, /zeit/i,
        /erledigt/i, /fokus/i, /konzentration/i, /leistung/i, /erfolg/i
      ]
    },
    {
      theme: "Wohlbefinden",
      patterns: [
        /gesundheit/i, /wohlbefinden/i, /entspann/i, /stress/i, /balance/i,
        /ruhe/i, /schlaf/i, /energie/i, /m√ºde/i, /ersch√∂pf/i, /erhol/i
      ]
    },
    {
      theme: "Beziehungen",
      patterns: [
        /freund/i, /familie/i, /beziehung/i, /partner/i, /gespr√§ch/i,
        /kommunikation/i, /konflikt/i, /liebe/i, /vertrauen/i, /unterst√ºtz/i
      ]
    },
    {
      theme: "Pers√∂nliches Wachstum",
      patterns: [
        /lern/i, /entwickl/i, /wachstum/i, /ziel/i, /fortschritt/i,
        /verbesser/i, /herausforderung/i, /f√§higkeit/i, /kompetenz/i, /wissen/i
      ]
    },
    {
      theme: "Emotionen",
      patterns: [
        /gef√ºhl/i, /emotion/i, /freude/i, /gl√ºck/i, /trauer/i, /angst/i,
        /wut/i, /frustration/i, /zufriedenheit/i, /motivation/i, /stimmung/i
      ]
    },
    {
      theme: "Kreativit√§t",
      patterns: [
        /kreativ/i, /idee/i, /inspiration/i, /kunst/i, /musik/i, /schreib/i,
        /mal/i, /gestalt/i, /erschaff/i, /fantasie/i, /vorstellung/i
      ]
    },
    {
      theme: "Finanzen",
      patterns: [
        /geld/i, /finanz/i, /budget/i, /ausgabe/i, /einkommen/i, /sparen/i,
        /investier/i, /kauf/i, /kosten/i, /schulden/i, /wirtschaft/i
      ]
    }
  ];
  
  // Pr√ºfe, welche Themen im Text vorkommen
  const detectedThemes = [];
  
  themePatterns.forEach(({ theme, patterns }) => {
    // Pr√ºfe, ob Schl√ºsselw√∂rter mit Themenmustern √ºbereinstimmen
    const keywordMatch = keywords.some(keyword => 
      patterns.some(pattern => pattern.test(keyword))
    );
    
    // Pr√ºfe, ob Inhalt mit Themenmustern √ºbereinstimmt
    const contentMatch = patterns.some(pattern => pattern.test(content));
    
    if (keywordMatch || contentMatch) {
      detectedThemes.push(theme);
    }
  });
  
  // Wenn keine Themen erkannt wurden, f√ºge "Allgemein" hinzu
  if (detectedThemes.length === 0) {
    detectedThemes.push("Allgemein");
  }
  
  return detectedThemes;
};

// Generiere Einsichten basierend auf Inhalt, Stimmung und Themen
const generateInsights = (content, mood, themes, type) => {
  // Basis-Einsichten basierend auf Reflexionstyp
  const typeBasedInsights = {
    "daily": [
      "T√§gliche Reflexion hilft dir, kleine Fortschritte zu erkennen und zu w√ºrdigen.",
      "Regelm√§√üige Reflexion f√∂rdert Selbstbewusstsein und emotionale Intelligenz."
    ],
    "weekly": [
      "W√∂chentliche Reflexion hilft dir, Muster in deinem Verhalten und deinen Erfahrungen zu erkennen.",
      "Durch regelm√§√üige w√∂chentliche Reflexion kannst du deine Ziele besser im Auge behalten."
    ],
    "monthly": [
      "Monatliche Reflexion gibt dir einen breiteren √úberblick √ºber deine Fortschritte und Herausforderungen.",
      "Langfristige Muster und Ver√§nderungen werden durch monatliche Reflexion deutlicher sichtbar."
    ],
    "goal": [
      "Ziel-Reflexion hilft dir, deine Strategien anzupassen und Hindernisse zu √ºberwinden.",
      "Regelm√§√üige Reflexion √ºber deine Ziele erh√∂ht die Wahrscheinlichkeit, dass du sie erreichst."
    ],
    "challenge": [
      "Herausforderungen bieten wertvolle Lernm√∂glichkeiten und f√∂rdern pers√∂nliches Wachstum.",
      "Durch Reflexion √ºber Herausforderungen entwickelst du Resilienz und Probleml√∂sungsf√§higkeiten."
    ],
    "gratitude": [
      "Dankbarkeit zu praktizieren kann deine allgemeine Lebenszufriedenheit steigern.",
      "Regelm√§√üige Dankbarkeitsreflexion kann positive Emotionen verst√§rken und negative reduzieren."
    ]
  };
  
  // Stimmungsbasierte Einsichten
  const moodBasedInsights = {
    "great": [
      "Du scheinst dich heute sehr positiv zu f√ºhlen. Nutze diese Energie, um Fortschritte bei deinen Zielen zu machen.",
      "Positive Stimmung kann Kreativit√§t und Produktivit√§t f√∂rdern. Ein guter Zeitpunkt, um neue Ideen zu erkunden."
    ],
    "good": [
      "Eine positive Grundstimmung ist eine gute Basis f√ºr kontinuierlichen Fortschritt.",
      "Achte darauf, was zu deiner guten Stimmung beitr√§gt, um diese Faktoren in Zukunft zu verst√§rken."
    ],
    "neutral": [
      "Neutrale Stimmung kann ein guter Ausgangspunkt f√ºr objektive Selbstreflexion sein.",
      "Auch in neutraler Stimmung kannst du kleine positive Momente finden und w√ºrdigen."
    ],
    "tired": [
      "M√ºdigkeit kann ein Zeichen sein, dass du eine Pause oder mehr Erholung brauchst.",
      "Achte auf deine Energie-Grenzen und priorisiere Selbstf√ºrsorge."
    ],
    "stressed": [
      "Stress kann ein Hinweis sein, dass du deine Priorit√§ten √ºberdenken solltest.",
      "Achtsamkeits√ºbungen und kurze Pausen k√∂nnen helfen, Stress zu reduzieren."
    ],
    "sad": [
      "Traurigkeit ist eine nat√ºrliche Emotion. Gib dir Raum, sie zu f√ºhlen, ohne dich daf√ºr zu verurteilen.",
      "Soziale Verbindungen und Gespr√§che k√∂nnen in traurigen Momenten unterst√ºtzend wirken."
    ],
    "anxious": [
      "Angst richtet unsere Aufmerksamkeit oft auf die Zukunft. Versuche, im gegenw√§rtigen Moment zu bleiben.",
      "Tiefes Atmen und Achtsamkeits√ºbungen k√∂nnen helfen, Angstsymptome zu reduzieren."
    ],
    "angry": [
      "Wut kann ein Hinweis auf verletzte Grenzen oder unerf√ºllte Bed√ºrfnisse sein.",
      "Versuche, deine Wut konstruktiv zu nutzen, um Ver√§nderungen anzusto√üen."
    ]
  };
  
  // Themenbasierte Einsichten
  const themeBasedInsights = {
    "Produktivit√§t": [
      "Effektives Zeitmanagement kann dir helfen, mehr zu erreichen, ohne dich zu √ºberfordern.",
      "Kleine, regelm√§√üige Fortschritte f√ºhren langfristig zu gro√üen Ergebnissen."
    ],
    "Wohlbefinden": [
      "Selbstf√ºrsorge ist keine Selbstsucht, sondern eine notwendige Grundlage f√ºr nachhaltiges Wohlbefinden.",
      "Balance zwischen Aktivit√§t und Erholung ist entscheidend f√ºr langfristiges Wohlbefinden."
    ],
    "Beziehungen": [
      "Offene Kommunikation und aktives Zuh√∂ren sind Schl√ºssel f√ºr gesunde Beziehungen.",
      "Gesunde Grenzen zu setzen ist wichtig f√ºr dich selbst und deine Beziehungen zu anderen."
    ],
    "Pers√∂nliches Wachstum": [
      "Herausforderungen sind Gelegenheiten zum Wachstum und zur Entwicklung neuer F√§higkeiten.",
      "Kontinuierliches Lernen und Anpassung sind Schl√ºssel zu pers√∂nlicher Entwicklung."
    ],
    "Emotionen": [
      "Alle Emotionen haben ihren Zweck und ihre Weisheit, auch die unangenehmen.",
      "Emotionale Intelligenz zu entwickeln hilft dir, deine Gef√ºhle besser zu verstehen und zu regulieren."
    ],
    "Kreativit√§t": [
      "Kreativit√§t gedeiht in einer Umgebung ohne Urteil und mit Raum zum Experimentieren.",
      "Regelm√§√üige kreative Praxis kann dein Wohlbefinden steigern und neue Perspektiven er√∂ffnen."
    ],
    "Finanzen": [
      "Finanzielle Klarheit und Planung k√∂nnen Stress reduzieren und Sicherheit schaffen.",
      "Ein ausgewogenes Verh√§ltnis zu Geld umfasst sowohl Sparen als auch bewusstes Genie√üen."
    ],
    "Allgemein": [
      "Regelm√§√üige Reflexion hilft dir, bewusster zu leben und bessere Entscheidungen zu treffen.",
      "Selbsterkenntnis ist der erste Schritt zu pers√∂nlichem Wachstum und Ver√§nderung."
    ]
  };
  
  // Sammle relevante Einsichten
  let insights = [];
  
  // F√ºge typbasierte Einsichten hinzu
  if (typeBasedInsights[type]) {
    insights = insights.concat(typeBasedInsights[type]);
  }
  
  // F√ºge stimmungsbasierte Einsichten hinzu
  if (moodBasedInsights[mood]) {
    insights = insights.concat(moodBasedInsights[mood]);
  }
  
  // F√ºge themenbasierte Einsichten hinzu
  themes.forEach(theme => {
    if (themeBasedInsights[theme]) {
      insights = insights.concat(themeBasedInsights[theme]);
    }
  });
  
  // W√§hle zuf√§llig 3 Einsichten aus
  const shuffledInsights = insights.sort(() => 0.5 - Math.random());
  return shuffledInsights.slice(0, 3);
};

// Generiere Empfehlungen basierend auf Themen und Stimmung
const generateRecommendations = (themes, mood, type) => {
  // Basis-Empfehlungen basierend auf Themen
  const themeBasedRecommendations = {
    "Produktivit√§t": [
      "Versuche die Pomodoro-Technik: 25 Minuten fokussierte Arbeit, gefolgt von 5 Minuten Pause.",
      "Erstelle eine To-Do-Liste mit maximal 3 Priorit√§ten f√ºr den n√§chsten Tag.",
      "Identifiziere und eliminiere Ablenkungen in deiner Arbeitsumgebung."
    ],
    "Wohlbefinden": [
      "Plane bewusst Zeit f√ºr Selbstf√ºrsorge ein, z.B. ein entspannendes Bad oder einen Spaziergang in der Natur.",
      "Praktiziere eine 5-min√ºtige Atem√ºbung oder Meditation.",
      "Achte auf ausreichend Schlaf und eine ausgewogene Ern√§hrung."
    ],
    "Beziehungen": [
      "Nimm dir Zeit f√ºr ein tiefes Gespr√§ch mit einem Freund oder Familienmitglied.",
      "√úbe aktives Zuh√∂ren in deinen n√§chsten Gespr√§chen.",
      "Dr√ºcke jemandem deine Wertsch√§tzung aus."
    ],
    "Pers√∂nliches Wachstum": [
      "Setze dir ein kleines, erreichbares Lernziel f√ºr die n√§chste Woche.",
      "Reflektiere √ºber eine k√ºrzlich gemeisterte Herausforderung und was du daraus gelernt hast.",
      "Lies einen Artikel oder schaue ein Video zu einem Thema, das dich interessiert."
    ],
    "Emotionen": [
      "F√ºhre ein Emotionstagebuch, um Muster in deinen Gef√ºhlen zu erkennen.",
      "Praktiziere Selbstmitgef√ºhl, besonders in schwierigen emotionalen Zust√§nden.",
      "Versuche eine Achtsamkeits√ºbung, um deine Emotionen ohne Urteil zu beobachten."
    ],
    "Kreativit√§t": [
      "Reserviere 15 Minuten f√ºr freies Schreiben oder Zeichnen ohne Ziel oder Erwartung.",
      "Probiere eine neue kreative Aktivit√§t aus, die du noch nie gemacht hast.",
      "Suche Inspiration in der Natur oder in Kunstwerken anderer."
    ],
    "Finanzen": [
      "Erstelle eine √úbersicht deiner Einnahmen und Ausgaben f√ºr den letzten Monat.",
      "Setze dir ein konkretes Sparziel und plane kleine Schritte dorthin.",
      "Informiere dich √ºber ein Finanzthema, das dich interessiert."
    ],
    "Allgemein": [
      "Setze dir ein kleines, konkretes Ziel f√ºr morgen.",
      "Nimm dir Zeit f√ºr eine Aktivit√§t, die dir Freude bereitet.",
      "Reflektiere √ºber deine Werte und wie du sie im Alltag leben kannst."
    ]
  };
  
  // Stimmungsbasierte Empfehlungen
  const moodBasedRecommendations = {
    "great": [
      "Nutze deine positive Energie, um ein herausforderndes Projekt voranzubringen.",
      "Teile deine positive Stimmung mit anderen durch eine freundliche Geste."
    ],
    "good": [
      "Reflektiere, was zu deiner guten Stimmung beitr√§gt, und wie du diese Faktoren verst√§rken kannst.",
      "Setze dir ein kleines, erreichbares Ziel f√ºr heute."
    ],
    "neutral": [
      "Probiere eine kurze Aktivit√§t, die deine Stimmung heben k√∂nnte, wie Musik h√∂ren oder einen kurzen Spaziergang.",
      "Nutze deine neutrale Stimmung f√ºr objektive Reflexion und Planung."
    ],
    "tired": [
      "Prioritisiere Ruhe und Erholung. Plane eine fr√ºhe Nachtruhe ein.",
      "√úberpr√ºfe deinen Zeitplan auf m√∂gliche √úberlastung und passe ihn an."
    ],
    "stressed": [
      "Praktiziere eine kurze Atem√ºbung oder Meditation zur Stressreduktion.",
      "Identifiziere die Hauptquellen deines Stresses und √ºberlege, wie du sie reduzieren kannst."
    ],
    "sad": [
      "Sei sanft mit dir selbst und erlaube dir, deine Gef√ºhle zu f√ºhlen.",
      "Suche soziale Unterst√ºtzung oder eine Aktivit√§t, die dir normalerweise Freude bereitet."
    ],
    "anxious": [
      "Praktiziere die 5-4-3-2-1-√úbung: Benenne 5 Dinge, die du siehst, 4 Dinge, die du f√ºhlst, 3 Dinge, die du h√∂rst, 2 Dinge, die du riechst und 1 Ding, das du schmeckst.",
      "Schreibe deine Sorgen auf und unterscheide zwischen denen, die du beeinflussen kannst, und denen, die au√üerhalb deiner Kontrolle liegen."
    ],
    "angry": [
      "Nimm dir Zeit f√ºr k√∂rperliche Aktivit√§t, um angestaute Energie abzubauen.",
      "Praktiziere tiefes Atmen, bevor du auf eine Situation reagierst, die dich w√ºtend macht."
    ]
  };
  
  // Sammle relevante Empfehlungen
  let recommendations = [];
  
  // F√ºge themenbasierte Empfehlungen hinzu
  themes.forEach(theme => {
    if (themeBasedRecommendations[theme]) {
      const randomRec = themeBasedRecommendations[theme][Math.floor(Math.random() * themeBasedRecommendations[theme].length)];
      recommendations.push(randomRec);
    }
  });
  
  // F√ºge stimmungsbasierte Empfehlungen hinzu
  if (moodBasedRecommendations[mood]) {
    const randomRec = moodBasedRecommendations[mood][Math.floor(Math.random() * moodBasedRecommendations[mood].length)];
    recommendations.push(randomRec);
  }
  
  // Entferne Duplikate und begrenze auf 3 Empfehlungen
  return [...new Set(recommendations)].slice(0, 3);
};

// Analysiere Stimmung basierend auf Text und ausgew√§hlter Stimmung
const analyzeMood = (content, selectedMood) => {
  // Stimmungsw√∂rter f√ºr einfache Textanalyse
  const moodWords = {
    "great": ["gro√üartig", "fantastisch", "wunderbar", "begeistert", "gl√ºcklich", "freudig", "energiegeladen", "motiviert"],
    "good": ["gut", "positiv", "zufrieden", "angenehm", "erfreulich", "nett", "sch√∂n"],
    "neutral": ["okay", "normal", "durchschnittlich", "mittelm√§√üig", "weder noch"],
    "tired": ["m√ºde", "ersch√∂pft", "ausgelaugt", "kraftlos", "schl√§frig", "matt"],
    "stressed": ["gestresst", "√ºberfordert", "angespannt", "unter druck", "hektisch", "nerv√∂s"],
    "sad": ["traurig", "niedergeschlagen", "entmutigt", "deprimiert", "ungl√ºcklich", "bedr√ºckt"],
    "anxious": ["√§ngstlich", "besorgt", "unruhig", "nerv√∂s", "unsicher", "beunruhigt"],
    "angry": ["w√ºtend", "ver√§rgert", "frustriert", "gereizt", "zornig", "genervt"]
  };
  
  // Z√§hle Stimmungsw√∂rter im Text
  const moodCounts = {};
  Object.entries(moodWords).forEach(([mood, words]) => {
    moodCounts[mood] = words.filter(word => content.toLowerCase().includes(word)).length;
  });
  
  // Bestimme dominante Stimmung im Text
  let dominantMood = Object.entries(moodCounts)
    .sort((a, b) => b[1] - a[1])
    .filter(entry => entry[1] > 0)[0];
  
  dominantMood = dominantMood ? dominantMood[0] : "neutral";
  
  // Vergleiche mit ausgew√§hlter Stimmung
  const moodMatch = dominantMood === selectedMood;
  
  return {
    selectedMood,
    detectedMood: dominantMood,
    match: moodMatch,
    insight: moodMatch 
      ? "Deine beschriebene Stimmung stimmt mit deiner Textanalyse √ºberein."
      : `Deine beschriebene Stimmung (${selectedMood}) unterscheidet sich von der in deinem Text erkennbaren Stimmung (${dominantMood}). Dies kann ein interessanter Punkt zur Selbstreflexion sein.`
  };
};

// Speichere Reflexion
export const saveReflection = (content, mood, type) => {
  // Validiere Eingabe
  const validation = validateReflectionInput(content, type);
  if (!validation.valid) {
    return {
      success: false,
      message: validation.message,
      suggestion: validation.suggestion
    };
  }
  
  // Analysiere Reflexion
  const analysis = analyzeReflection(content, mood, type);
  
  // Erstelle Reflexionsobjekt
  const reflection = {
    id: `reflection_${Date.now()}`,
    content,
    mood,
    type,
    date: new Date().toISOString(),
    analysis: {
      themes: analysis.themes,
      insights: analysis.insights,
      recommendations: analysis.recommendations,
      moodAnalysis: analysis.moodAnalysis
    }
  };
  
  // Lade bestehende Reflexionen
  const reflections = localStorageUtil.loadData('nebula_reflections', []);
  
  // F√ºge neue Reflexion hinzu
  reflections.unshift(reflection);
  
  // Speichere aktualisierte Reflexionen
  localStorageUtil.saveData('nebula_reflections', reflections);
  
  // Aktualisiere Benutzerstatistiken
  const SocialFeatures = require('./SocialFeatures').default;
  SocialFeatures.updateUserStatistics();
  
  // Pr√ºfe auf neue Errungenschaften
  SocialFeatures.checkAchievements();
  
  return {
    success: true,
    message: "Reflexion erfolgreich gespeichert.",
    reflection,
    xpEarned: getReflectionXP(type)
  };
};

// Erhalte XP-Belohnung f√ºr Reflexionstyp
const getReflectionXP = (type) => {
  const reflectionType = reflectionTypes.find(t => t.id === type) || reflectionTypes[0];
  return reflectionType.xpReward;
};

// Generiere Reflexionsvorschl√§ge basierend auf Benutzeraktivit√§ten
export const generateReflectionPrompts = () => {
  const skills = localStorageUtil.loadData('nebula_skills', []);
  const quests = localStorageUtil.loadData('nebula_quests', { daily: [], weekly: [], longterm: [] });
  
  const customPrompts = [];
  
  // F√ºge Prompts basierend auf k√ºrzlich abgeschlossenen Quests hinzu
  const completedQuests = [
    ...(quests.daily || []).filter(q => q.completed),
    ...(quests.weekly || []).filter(q => q.completed),
    ...(quests.longterm || []).filter(q => q.completed)
  ].sort((a, b) => new Date(b.completedDate) - new Date(a.completedDate)).slice(0, 3);
  
  completedQuests.forEach(quest => {
    customPrompts.push(`Wie f√ºhlst du dich nach Abschluss der Quest "${quest.title}"?`);
    customPrompts.push(`Was hast du durch die Arbeit an "${quest.title}" gelernt?`);
  });
  
  // F√ºge Prompts basierend auf Skills hinzu
  const topSkills = skills.sort((a, b) => b.currentLevel - a.currentLevel).slice(0, 3);
  
  topSkills.forEach(skill => {
    customPrompts.push(`Wie hat sich deine F√§higkeit in "${skill.name}" in letzter Zeit entwickelt?`);
    customPrompts.push(`Welche Herausforderungen hast du bei der Entwicklung von "${skill.name}" erlebt?`);
  });
  
  // F√ºge allgemeine Prompts hinzu
  const generalPrompts = [
    "Was hat dich heute inspiriert?",
    "Welche Fortschritte hast du in letzter Zeit bei deinen Zielen gemacht?",
    "Welche Herausforderung besch√§ftigt dich derzeit am meisten?",
    "Wof√ºr bist du heute besonders dankbar?",
    "Welche neue Erkenntnis hattest du in letzter Zeit?",
    "Wie k√∂nntest du morgen einen kleinen Schritt vorw√§rts machen?"
  ];
  
  // Kombiniere und mische Prompts
  const allPrompts = [...customPrompts, ...generalPrompts];
  const shuffledPrompts = allPrompts.sort(() => 0.5 - Math.random());
  
  return shuffledPrompts.slice(0, 5);
};

export default {
  reflectionTypes,
  moodCategories,
  validateReflectionInput,
  analyzeReflection,
  saveReflection,
  generateReflectionPrompts
};
